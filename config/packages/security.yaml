security:
    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER]

    enable_authenticator_manager: true

    # https://symfony.com/doc/current/security.html#c-hashing-passwords
    password_hashers:
        App\Entity\Users: 'auto'

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
#    password_hashers:
#        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Users
                property: email

#        jwt:
#            lexik_jwt: ~

#        users_in_memory: { memory: null }

    firewalls:

        refresh:
            pattern:  ^/api/token/refresh
            stateless: false
            refresh_jwt:
                provider: app_user_provider

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api:
            pattern: ^/api/
            stateless: false
#            provider: jwt
            jwt: ~
            json_login:
                provider: app_user_provider
                check_path: /api/login_check
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
                require_previous_session: false

#            guard:
#                authenticators:
#                    - lexik_jwt_authentication.jwt_token_authenticator

#            logout:
#                path: /logout
#                handlers: [App\Service\Authentication\LogoutHandler]

#        register:
#            pattern: ^/api/register
#            stateless: true
#            anonymous: true

        main:
            lazy: true
            #provider: jwt

            provider: app_user_provider

#            guard:
#                authenticators:
#                    - lexik_jwt_authentication.jwt_token_authenticator

            json_login:
                username_path: email
                password_path: password
                check_path: /login

            logout:
                path: /logout
#                handlers: [App\Service\Authentication\LogoutHandler]

    access_control:
        - { path: ^/authentication_token, roles: PUBLIC_ACCESS }
        - { path: ^/api/token/refresh, roles: PUBLIC_ACCESS }
        - { path: ^/api/login_check, roles: PUBLIC_ACCESS }
        - { path: ^/register, roles: PUBLIC_ACCESS }
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/api/refresh, roles: PUBLIC_ACCESS }
        - { path: ^/api/, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api, roles: PUBLIC_ACCESS }

#        main:
#            lazy: true
#            stateless: true
#            provider: app_user_provider
#            json_login:
#                check_path: /authentication_token
#                username_path: email
#                password_path: password
#                success_handler: lexik_jwt_authentication.handler.authentication_success
#                failure_handler: lexik_jwt_authentication.handler.authentication_failure
#            jwt: ~
#            provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
#    access_control:
#        - { path: ^/api/docs, roles: PUBLIC_ACCESS }
#        - { path: ^/api, roles: AUTHENTICATED_SUCCESSFULLY }
#        - { path: '^/authentication_token', roles: PUBLIC_ACCESS }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
